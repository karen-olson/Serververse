name: Java CI with Gradle
on:
  push:
    branches: [ "**" ]
permissions:
  contents: read

jobs:
  build-and-test:
    name: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SSH_KEY }}
          submodules: true

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Run unit tests
        run: ./gradlew test

      - name: Create jar file
        run: ./gradlew jar

      - name: Run acceptance test for Echo Server
        run: ./bin/acceptance-test ./build/libs/Serververse-1.0-SNAPSHOT.jar
        shell: bash

      - name: Run server in background
        run: java -jar ./build/libs/Serververse-1.0-SNAPSHOT.jar &

      - name: Set up Ruby 2.7
        uses: ruby/setup-ruby@2b019609e2b0f1ea1a2bc8ca11cb82ab46ada124
        with:
          ruby-version: '2.7'

      - name: Run acceptance test suite for HTTP Server
        run: |
          cd http_server_spec
          bundle install
          bundle exec spinach
        continue-on-error: true

  deploy:
    name: deploy
    #    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: serververse
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG